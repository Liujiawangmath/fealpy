from typing import Protocol, Sequence, TypeVar

from ...backend import TensorLike
from ...mesh.mesh_base import Mesh
from ..utils import example_import_util


class OPCPDEDataProtocol(Protocol):
    description : str
    def geo_dimension(self) -> int: ...
    def domain(self) -> Sequence[float]: ...
    def diffusion_coef(self, p: TensorLike) -> TensorLike: ...
    def advection_coef(self, p: TensorLike) -> TensorLike: ...
    def reaction_coef(self, p: TensorLike) -> TensorLike: ...
    def solution(self, p: TensorLike) -> TensorLike: ...
    def gradient(self, p: TensorLike) -> TensorLike: ...
    def flux(self, p: TensorLike) -> TensorLike: ...
    def source(self, p: TensorLike) -> TensorLike: ...
    def dirichlet(self, p: TensorLike) -> TensorLike: ...
    def is_dirichlet_boundary(self, p: TensorLike) -> TensorLike: ...
    def neumann(self, p: TensorLike) -> TensorLike: ...
    def is_neumann_boundary(self, p: TensorLike) -> TensorLike: ...
    def robin(self, p: TensorLike) -> TensorLike: ...
    def is_robin_boundary(self, p: TensorLike) -> TensorLike: ...

OPCPDEDataT = TypeVar('OPCPDEDataT', bound=OPCPDEDataProtocol)


DATA_TABLE = {
    # example name: (file_name, class_name)
    "coscos": ("coscosdata", "CosCosData"),
}


def get_example(key: str) -> OPCPDEDataProtocol:
    return example_import_util("optimal_control", key, DATA_TABLE)
